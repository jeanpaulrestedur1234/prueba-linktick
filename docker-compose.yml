version: '3.8'

services:
  postgres_inventory:
    image: postgres:14
    restart: always
    container_name: postgres_inventory
    environment:
      POSTGRES_DB: ${INVENTORY_DB} 
      POSTGRES_USER: ${INVENTORY_DB_USER} 
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASSWORD} 
    ports:
      - "${INVENTORY_DB_PORT}:5432" 
    volumes:
      - inventory_data:/var/lib/postgresql/data
      - ./apps/inventory/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${INVENTORY_DB_USER} -d ${INVENTORY_DB}"]   
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_products:
    image: postgres:14
    restart: always
    container_name: postgres_products
    environment:
      POSTGRES_DB: ${PRODUCTS_DB} 
      POSTGRES_USER: ${PRODUCTS_DB_USER} 
      POSTGRES_PASSWORD: ${PRODUCTS_DB_PASSWORD} 
    ports:
      - "${PRODUCTS_DB_PORT}:5432" 
    volumes:
      - products_data:/var/lib/postgresql/data
      - ./apps/products/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCTS_DB_USER} -d ${PRODUCTS_DB}"]   
      interval: 5s
      timeout: 5s
      retries: 5

  inventory:
    build:
      context: ./apps/inventory
    environment:
      SPRING_APPLICATION_NAME: inventory
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_inventory:5432/${INVENTORY_DB}
      SPRING_DATASOURCE_USERNAME: ${INVENTORY_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${INVENTORY_DB_PASSWORD}
      SERVER_PORT: ${INVENTORY_PORT} 
    ports:
      - "${INVENTORY_PORT}:${INVENTORY_PORT}" 
    depends_on:
      postgres_inventory:
        condition: service_healthy

  products:
    build:
      context: ./apps/products
    environment:
      SPRING_APPLICATION_NAME: products
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_products:5432/${PRODUCTS_DB}
      SPRING_DATASOURCE_USERNAME: ${PRODUCTS_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${PRODUCTS_DB_PASSWORD}
      SERVER_PORT: ${PRODUCTS_PORT} 
    ports:
      - "${PRODUCTS_PORT}:${PRODUCTS_PORT}" 
    depends_on:
      postgres_products:
        condition: service_healthy

volumes:
  inventory_data:
  products_data: